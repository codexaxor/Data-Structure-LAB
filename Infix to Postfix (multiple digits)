#include<bits/stdc++.h>
using namespace std;

int getPrecedence(string x)
{
    char c = x[0];
    switch (c)
    {
    case '+':
    case '-':
        return 1;

    case '*':
    case '/':
        return 2;

    }
    return -1;
}


int main()
{

    stack <string> save;

    char s[100];

    gets(s);

    cout << "Infix Expression is : " << s << endl;

    int charlen = strlen(s);
    s[charlen] = '$';

    //s = s+"$";

    int i = 0;


    save.push("#");

    string postfix;
    string s2 = "";
    string s3 = "";

    while(s[i]!='$')
    {
        s2 = "";
        s3 = "";
        if(s[i]=='(')
        {
            s2+=s[i];
            save.push(s2);
        }

        else if(s[i]=='-' && (s[i+1]>='0' && s[i+1]<='9'))
        {
                  postfix+=s[i];
        }

        else if(s[i]==')')
        {
            while(save.top()!= "(")
            {
                string c = save.top();
                postfix+=c;
                save.pop();
            }

            save.pop();
        }

        /*else if( (s[i]==' ') && (s[i+1] == '-') &&  (s[i+2]!=' '))
        {
            postfix+=s[i];
            postfix+=s[i+1];
            i++;
        }*/

        else if(s[i] == '+' ||s[i] == '-' || s[i] == '*' || s[i] == '/')
        {
            s3+=s[i];
            if(getPrecedence(save.top())<=getPrecedence(s3))
            {
                s2+= " ";
                s2+=s[i];
                save.push(s2);
            }
            else
            {
                string c = save.top();
                postfix+=c;
                save.pop();
                s2+=s[i];
                save.push(s2);
            }
        }
        else
           {
                       postfix+=s[i];
           }
        i++;
    }


    while(save.top()!="#")
    {
        postfix+=save.top();
        save.pop();
    }

    cout << "Postfix Expression is : " << postfix << endl;

    return 0;
}
